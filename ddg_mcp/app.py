#!/usr/bin/env python3
"""
ddg-mcp MCP Server

An awesome MCP generated by AI
"""

import argparse
import asyncio
import logging
import os
from typing import Dict, Any, List, Optional

import httpx
from fastmcp import FastMCP

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize FastMCP
mcp = FastMCP("ddg-mcp MCP Server")


@mcp.tool()
async def duckduckgo_search(query: str) -> Dict[str, Any]:
    """
    Perform a DuckDuckGo search.
    
    Args:
        query: The search query
    
    Returns:
        Dictionary with search results
    """
    try:
        url = f"https://api.duckduckgo.com/?q={query}&format=json&pretty=1"
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url)
            response.raise_for_status()
            data = response.json()
            
            return {
                "success": True,
                "query": query,
                "abstract": data.get("Abstract", "No abstract available"),
                "related_topics": [topic.get("Text") for topic in data.get("RelatedTopics", [])[:5]],
                "source": data.get("AbstractSource"),
                "url": data.get("AbstractURL")
            }
            
    except Exception as e:
        logger.error(f"DuckDuckGo search failed for '{query}': {e}")
        return {
            "success": False,
            "query": query,
            "error": str(e)
        }


@mcp.tool()
async def get_server_info() -> Dict[str, Any]:
    """
    Get information about this MCP server.
    
    Returns:
        Server information including name and available tools
    """
    return {
        "name": "ddg-mcp",
        "version": "1.0.0",
        "description": "An awesome MCP generated by AI",
        "author": "AI Generator",
        "framework": "FastMCP",
        "tools": [
            "duckduckgo_search",
            "get_server_info"
        ],
        "features": [
            "HTTP and stdio transport support",
            "Async/await support", 
            "Type hints",
            "Error handling",
            "Logging"
        ]
    }


def main():
    """Main entry point for the MCP server"""
    parser = argparse.ArgumentParser(description="ddg-mcp MCP Server")
    parser.add_argument("--transport", default="stdio", help="Transport type (stdio, streamable-http)")
    parser.add_argument("--host", default="localhost", help="Host for HTTP transport")
    parser.add_argument("--port", type=int, default=8080, help="Port for HTTP transport")
    
    args = parser.parse_args()
    
    logger.info(f"🚀 Starting ddg-mcp MCP Server...")
    logger.info(f"📡 Transport: {args.transport}")
    
    if args.transport == "streamable-http":
        logger.info(f"🌐 Host: {args.host}")
        logger.info(f"🔌 Port: {args.port}")
        logger.info(f"🔗 Server URL: http://{args.host}:{args.port}/mcp")
        mcp.run(transport=args.transport, host=args.host, port=args.port)
    else:
        logger.info(f"📝 Using stdio transport for direct integration")
        mcp.run(transport=args.transport)


if __name__ == "__main__":
    main()